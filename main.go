package main

import (
	"encoding/csv"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"
)

// HeartRails Geo API
var layout = "2006-01-02 15:04:05"

type AutoGenerated struct {
	Response Response `json:"response"`
}
type Location struct {
	City string `json:"city"`
	X    string `json:"x"`
	Y    string `json:"y"`
}
type Response struct {
	Location []Location `json:"location"`
}

// openweather
type OpenWeatherMapAPIResponse struct {
	Main    Main      `json:"main"`
	Weather []Weather `json:"weather"`
}

type Main struct {
	Temp float64 `json:"temp"`
}

type Weather struct {
	Main string `json:"main"`
}

func main() {
	for {
		//現在の日付時刻
		now := time.Now()
		recordTime := now.Format(layout)     //string型にする
		file, err := os.Open("postcode.csv") // 郵便番号データをos.Openで開く
		if err != nil {
<<<<<<< HEAD
			log.Fatal(err)
=======
			panic(err)
		}
		defer resArea.Body.Close()

		// レスポンスを読み取り
		bytes, err := ioutil.ReadAll(resArea.Body)
		if err != nil {
			panic(err)
		}
		// JSONパース
		var apiResArea AutoGenerated
		if err := json.Unmarshal(bytes, &apiResArea); err != nil {
			panic(err)
		}
		token := "自分のAPIキー" // APIトークン
		latitude := apiResArea.Response.Location[0].Y
		longitude := apiResArea.Response.Location[0].X

		endPoint := "https://api.openweathermap.org/data/2.5/weather?lat=" + latitude + "&lon=" + longitude + "&appid=" + token

		// リクエストを投げる
		res, err := http.Get(endPoint)
		if err != nil {
			panic(err)
		}
		defer res.Body.Close()

		// レスポンスを読み取り
		bytes2, err := ioutil.ReadAll(res.Body)
		if err != nil {
			panic(err)
		}

		// JSONパース
		var apiRes OpenWeatherMapAPIResponse
		if err := json.Unmarshal(bytes2, &apiRes); err != nil {
			panic(err)
		}
		var temperature string

		temperature = strconv.Itoa(int(apiRes.Main.Temp - 273.15)) //セルシウスのため-273.15
		//csvファイルが存在している場合は追加で書き込み
		f, err := os.OpenFile("time_place_weather_temperature.csv", os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0644)
		if err != nil {
			log.Fatal("Error:", err)
>>>>>>> refs/remotes/origin/main
		}
		defer file.Close()

		r := csv.NewReader(file)
		rows, err := r.ReadAll() // csvを読み込む
		if err != nil {
			log.Fatal(err)
		}

		for _, v := range rows {
			postcode := v[0]
			urlArea := "https://geoapi.heartrails.com/api/json?method=searchByPostal&postal=" + postcode
			// リクエストを投げる
			resArea, err := http.Get(urlArea)
			if err != nil {
				panic(err)
			}
			defer resArea.Body.Close()

			// レスポンスを読み取り
			bytes, err := ioutil.ReadAll(resArea.Body)
			if err != nil {
				panic(err)
			}
			// JSONパース
			var apiResArea AutoGenerated
			if err := json.Unmarshal(bytes, &apiResArea); err != nil {
				panic(err)
			}
			token := "daadbcf43be9fa464c47b3431ac4429a" // APIトークン
			latitude := apiResArea.Response.Location[0].Y
			longitude := apiResArea.Response.Location[0].X

			endPoint := "https://api.openweathermap.org/data/2.5/weather?lat=" + latitude + "&lon=" + longitude + "&appid=" + token

			// リクエストを投げる
			res, err := http.Get(endPoint)
			if err != nil {
				panic(err)
			}
			defer res.Body.Close()

			// レスポンスを読み取り
			bytes2, err := ioutil.ReadAll(res.Body)
			if err != nil {
				panic(err)
			}

			// JSONパース
			var apiRes OpenWeatherMapAPIResponse
			if err := json.Unmarshal(bytes2, &apiRes); err != nil {
				panic(err)
			}
			var temperature string

			temperature = strconv.Itoa(int(apiRes.Main.Temp - 273.15)) //セルシウスのため-273.15
			//csvファイルが存在している場合は追加で書き込み
			f, err := os.OpenFile("time_place_weather_temperature.csv", os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0644)
			if err != nil {
				log.Fatal("Error:", err)
			}
			defer file.Close()
			records := []string{
				/*
					日付時刻
					場所
					天気
					気温
				*/
				recordTime,
				apiResArea.Response.Location[0].City,
				apiRes.Weather[0].Main,
				temperature,
			}

			w := csv.NewWriter(f)
			err = w.Write(records) //書き込み
			if err != nil {
				log.Fatal("Error:", err)
			}
			w.Flush()
		}
		time.Sleep(24 * time.Hour)
	}
}
